{
  "hash": "16b82d866e9d7398921c164ff5742423",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Comparing Latent Means\"\nhighlight-style: solarized\ncode-block-border-left: \"#FCC251\"\n\nformat:\n  html: default\n  gfm: default\n---\n\n\n::: {.cell}\n<style type=\"text/css\">\nh1, h2, h3, h4 {\n  color: #CB6015;\n}\n</style>\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\nThompson, M. & Green, S. (2013). Evaluating between-group differences in latent variable means. In G. Hancock & R. Mueller (Eds.), *Structural equation modeling: A second course* (2nd ed., pp. 163-218). Charlotte, NC: Information Age Publishing.\n\n<br />\n\nThis example shows how to assess group differences in latent variable means using two types of SEM: structured means modeling (SMM) and multiple indicators multiple causes (MIMIC) modeling. Comparison of latent means assumes some level of measurement invariance. The first part of this example demonstrates SMM assuming strong measurement invariance. MIMIC modelling assumes strict measurement invariance only. SMM is more flexible than MIMIC, and can accommodate different levels of measurement invariance. The second part of the example demonstrates SMM under partial invariance of loadings and intercepts.\n\n<br />\n\n### SMM assuming strong measurement invariance\n\nThompson & Green (T&G) present a two-group (Day-care and Home-care), two-construct (Academic and Social school readiness) model. Each construct is assessed with three manifest indicators. The SEM diagram in Fig 5.1 (p. 170) and reproduced below shows the model as it applies to the first group. Academic and Social are the two constructs; and V~1~, ..., V~6~ are the manifest indicators. In the diagram, the solid lines represent the covariance structure, and the gray lines represent the mean structure (ie, the means and intercepts).\n\nThe symbols are:\n\n - $b$ - loadings\n - $c$ - latent variances and covariance\n - $c$ - indicator residual variances\n - $a$ - latent means\n - $a$ - indicator intercepts\n\n![](images/Means.svg){fig-align=\"left\"}\n\n<br />\n\n#### Load relevant packages\n\nFirst, load the **lavaan** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lavaan)\n```\n:::\n\n\n<br />\n\n#### Get the data\n\nSummary data for dataset 1 is presented in Table 5.1 (p. 169). It gives the lower triangle of the co/variance matrix, means, and sample size for each group. The co/variances and means are entered as vectors, as they appear in the Table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group 1 - Day-care\ncov1 <- c(\n 138.00,\n  45.58,  80.49,\n  35.19,  23.56,  56.34,\n  45.13,  32.00,  16.64, 232.17,\n  35.33,  10.49,  10.56,  79.74, 149.16,\n  73.34,  28.73,  33.21, 117.30,  79.90, 324.36)\n\nmeans1 <- c(50.40, 79.60, 98.88, 74.06, 49.12, 120.10)\nn1 <- 200\n\n# Group 2 - Home-care\ncov2 <- c(\n 127.61,\n  58.49,  76.81,\n  29.09,  19.72,  54.29,\n  45.84,  28.94,  31.82, 223.09,\n  20.33,  13.27,   5.81,  62.25, 135.72,\n  50.64,  55.45,  30.15, 126.74,  62.16, 337.37)\n\nmeans2 <- c(53.70, 81.32, 101.82, 77.69, 51.62, 123.37)\nn2 <- 200\n```\n:::\n\n\nThe variable names are also given in Table 5.1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- c(\"V1\", \"V2\", \"V3\", \"V4\", \"V5\", \"V6\")\n```\n:::\n\n\nCombine the co/variances, means, and sample sizes into lists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov <- list(\"Day-care\" = cov1, \"Home-care\" = cov2)\nmeans <- list(means1, means2)\nn <- list(n1, n2)\n```\n:::\n\n\nUse the `getCov()` function from the **lavaan** package to obtain the full co/variance matrix for each group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov <- lapply(cov, getCov, names = names)\n```\n:::\n\n\n<br />\n\n### The single-group model\n\nThe single-group model is shown above and in Fig 5.1 (p. 170).\n\nSome points to consider when constructing the model statement.\n\nThe model is fit to Group 1 (Day-care group) only.\n\nFor identification purposes, the first loading of the Academic construct and the third loading of the Social construct are constrained to one; and the latent means are constrained to zero.\n\nThis is not **lavaan**'s default.  The default method constrains the first loading of all constructs to one. For the Social construct, the default has to be explicitely disabled by pre-multiplying the the first loading by `NA`. (I constrain the first loading in the Academic construct to one also. It's not necessary, but I do it to make it obvious that one loading in each construct is constrained to one.)\n\nThere is no need to be concerned about indicator residual variances and intercepts, nor construct variances and their covariance - **lavaan** will add them automatically. As well, there is no need to be concerned about setting the latent means to zero - **lavaan** will do that by default.\n\nThe model statement for the single-group model is quite brief.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- \"\n   # Measurement Model\n   Academic =~ 1*V1 + V2 + V3\n   Social =~ NA*V4 + V5 + 1*V6\n\"\n```\n:::\n\n\n<br /> \n\n#### Fit the model and get the results\n\nThe latent means that are constrained to zero by default will not appear in the output. To see them, set `remove.unused = FALSE` in the `summary()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1_g1_fit <- sem(model, sample.cov = cov[[1]], sample.nobs = n[[1]],\n   sample.mean = means[[1]])\nsummary(m1_g1_fit, fit.measures = TRUE, remove.unused = FALSE)\n```\n:::\n\n\nCompare with Fig 5.1 (and fit measures on page 173, end of first paragraph).\n\n<br />\n\n### The multi-group model\n\nThe multi-group model is shown in Fig 5.2 (p. 174), and is reproduced below.\n\n![](images/Means1.svg){fig-align=\"left\"}\n\nSome points to consider:\n\nThis is a two-group model - Day-care and Home-care groups.\n\nThe model assumes strong measurement invariance - Loadings and intercepts are equal across groups. There is no need to be concerned with these constraints when constructing the model statement; they are set using `group.equal = c(\"loadings\", \"intercepts\")` statement in the `sem()` function.\n\nFor purposes of identification, the first loading of the Academic construct and the third loading of the Social construct are constrained to one (also free Social's first loading so it can be estimated). With strong metric invariance, these constraints will apply in both groups. Also, latent means are set to zero in the first group only, but **lavaan** will deal with that automatically. Be aware that these means will not appear in the output. To see them, use `remove.unused = FALSE` in the `summary()` function. The model statement is the same as before, but is repeated here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- \"\n   # Measurement Model\n   Academic =~ 1*V1 + V2 + V3\n   Social =~ NA*V4 + V5 + 1*V6\n\"\n```\n:::\n\n\n<br />\n\n#### Fit the model and get the results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2_strong_fit <- sem(model, sample.cov = cov, sample.nobs = n, \n   sample.mean = means, group.equal = c(\"loadings\", \"intercepts\"))\nsummary(m2_strong_fit, fit.measures = TRUE, remove.unused = FALSE)\n```\n:::\n\n\n<br />\n\n#### Fit measures and comparing models\n\nOn page 176, T&G present fit measures beginning with the model applied to Group 1 (already presented above), and for the model applied to Group 2.\n\nFit the model to group 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1_g2_fit <- sem(model, sample.cov = cov[[2]], sample.nobs = n[[2]], sample.mean = means[[2]])\n```\n:::\n\n\nNext, a function to extract fit measures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGetFit <- function(fit, ...) {\n   tab = fitMeasures(fit, ...)\n   tab = round(tab, 3) \n   return(tab)\n}\n```\n:::\n\n\nExtract fit measures from the fits for the two single-group models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the fit measures\nmeasures = c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"srmr\", \n   \"rmsea\", \"rmsea.ci.lower\", \"rmsea.ci.upper\")\nGetFit(m1_g1_fit, measures)\nGetFit(m1_g2_fit, measures)\n```\n:::\n\n\nCompare with the two sets of fit measures on page 176 - middle of the page.\n\nAt the end of that paragraph, T&G present fit measures for a configurally invariant model applied to the two groups. Configural invariance requires only that the same model structure apply to both groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2_config_fit <- sem(model, sample.cov = cov, sample.nobs = n, sample.mean = means)\nGetFit(m2_config_fit)\n```\n:::\n\n\nThen on page 177, they present fit measures for the strong invariant model again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGetFit(m2_strong_fit)\n```\n:::\n\n\nIn the same paragraph, they present the $\\upchi$^2^ difference test to decide which of the two models, the configurally invariant model or the strong metric invariance model, is the preferred model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(m2_config_fit, m2_strong_fit)\n```\n:::\n\n\nConclusion: The model assuming strong metric invariance is preferred. \n\n<br />\n\n#### The means\n\nNow the focus turns to the means. In the `m2_strong_fit`, the means for both constructs differ across the groups. Are those differences statistically significant? At the bottom of page 177, T&G provide fit measures ($\\upchi$^2^) for two models where the means are constrained to equality: first for the Academic construct; second for the Social construct. Following this, the fits for each of these models is compared in turn to the fit for the model with unequal means - `m2_strong_fit`.  Comparison is by means of the $\\upchi$^2^ difference test using the `anova()` function. \n\nFirst, the model statements. In the first model below, the means for the Academic construct are constrained to be equal across the groups; in the second model, the means for the Social construct are constrained to be equal across the groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#    The Academic construct\nAcademic_equal <- \"\n   # Measurement Model\n   Academic =~ 1*V1 + V2 + V3\n   Social   =~ NA*V4 + V5 + 1*V6\n\n   Academic ~ c(0,0)*1\n   Social   ~ c(0,NA)*1\n\"\n\n#    The Social construct\nSocial_equal <- \"\n   # Measurement Model\n   Academic =~ 1*V1 + V2 + V3\n   Social   =~ NA*V4 + V5 + 1*V6\n\n   Academic ~ c(NA,0)*1\n   Social   ~ c(0,0)*1\n\"\n```\n:::\n\n\nSecond, fit the models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAcademic_equal_fit <- sem(Academic_equal, sample.cov = cov, sample.nobs = n,\n     sample.mean = means, group.equal = c(\"loadings\", \"intercepts\"))\n\nSocial_equal_fit <- sem(Social_equal, sample.cov = cov, sample.nobs = n,\n     sample.mean = means, group.equal = c(\"loadings\", \"intercepts\"))\n```\n:::\n\n\nThird, get the fit measures. Compare the $\\upchi$^2^ with those near the bottom of page 177.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGetFit(Academic_equal_fit)\nGetFit(Social_equal_fit)\n```\n:::\n\n\nFourth, compare the fit for each model to `m2_strong_fit`. Compare the $\\upchi$^2^ difference tests with those at the bottom of page 177. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(Academic_equal_fit, m2_strong_fit)\nanova(Social_equal_fit, m2_strong_fit)\n```\n:::\n\n\nConclusion: Means for both constructs differ across the groups. \n\n<br />\n\n#### Effect sizes\n\nHow big are those differences?\n\nT&G assess effect size using standardised effect sizes. The formula is given at the bottom of page 178: for each construct, the effect size is given by the difference in the means divided by the square root of the variance. \n\nBut which variance? And for that matter, which output provides the means and variances?\n\nThe output is the one where the means differ - `m2_strong_fit`.\n\nT&G label the first group, the Day-care group as a reference group, and therfore, they use its variance as the variance in the effect size formula.\n\nGet the effect sizes by copying the means and the variance for Group 1 from the summary for `m2_strong_fit`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(m2_strong_fit)\nES_Acad <- (3.566 - 0) / sqrt(73.69)\nES_Soc <- (3.885 - 0) / sqrt(141.75)\n```\n:::\n\n\nCompare with effect sizes given at the bottom of page 178.\n\nIf pooled variances are required, then, with equal groups sizes, pooled variance is simply the average of the two variances.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(m2_strong_fit)\nES_Acad <- (3.566 - 0) / sqrt((73.69 + 80.52)/2)\nES_Soc <- (3.885 - 0) / sqrt((141.75 + 133.43)/2)\n```\n:::\n\n\nHowever, copying is fraught with danger. It is better to get R to extract the means and variances.\n\nThe `lavInspect()` function returns a list of estimates for model parameters. The latent means are in the \"alpha\" elements, and latent co/variances are in the \"psi\" elements.  There are two sets for each - one for each group. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  Get estimates in a list\nestimates <- lavInspect(m2_strong_fit, \"est\"); estimates\n```\n:::\n\n\nSelect the means (using `[[` function), take their differences across groups, and ignore the sign (using `abs` function). I use the `lapply()` function to apply a function (`[[`) to select the two sets of means. I use the `Reduce()` function to reduce the two sets of means to one set by subtracting one group's means from the other group's means.\n\nSimilarly, select the co/variances (using `[[` function), select only the variances (using `diag()` function), and pool the variances by taking their average across the groups. Again, I use the `lapply()` function to apply a function (`[[`) to select the two sets of co/variances; then `lapply()` again to apply another function (`diag()`) to select just the variances. I use the `Reduce()` function to reduce the two sets of variances to one set by apply an averaging function. \n\nFinally, divide the differences in means by the square root of the pooled variances to get the effect sizes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get difference in means\nmeans <- abs(Reduce('-', lapply(estimates, '[[', 'alpha')))\n\n# Get average of variances\nvar <- lapply(lapply(estimates, '[[', 'psi'), diag)\npool <- Reduce(function(x,y) (x + y)/2, var)\n\n# Get effect sizes\nES <- means/sqrt(pool)\ncolnames(ES) <- \"ES\"\nES\n```\n:::\n\n\nTo get the effect sizes using a reference group's variance (ie, T&G's effect sizes).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get difference in means\nmeans <- abs(Reduce('-', lapply(estimates, '[[', 'alpha')))\n\n# Get the variances\nvar <- lapply(lapply(estimates, '[[', 'psi'), diag)\n\n# Effect size (1st group is reference group)\nES <- means / sqrt(var[[1]])\ncolnames(ES) <- \"ES\"\nES\n```\n:::\n\n\nCampare with the effect sizes given at the bottom of page 178.\n\n<br />\n\n## MIMIC model (assuming strict metric invariance)\n\nFirst get the data - from bottom part of Table 5.1 (p. 169)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov <- c(\n 135.61,\n  53.33,  79.21,\n  34.48,  22.86,  57.33,\n  48.37,  31.96,  26.83, 230.35,\n  29.82,  12.93,   9.99,  73.08, 143.64,\n  64.53,  43.40,  34.00, 124.69,  72.90, 332.72,\n   0.83,   0.43,   0.73,   0.91,   0.62,   0.82,   0.25\n)\n\nn <- 400\n\n# Get the variable names from the Table\nnames <- c(\"V1\", \"V2\", \"V3\", \"V4\", \"V5\", \"V6\", \"V7\")\n\n# Get the full variance/covariance matrix\ncov <- getCov(cov, names = names)\n```\n:::\n\n\nIn the MIMIC model, V7 is the grouping variable. It is dummy-coded: 0 for the Day-care group, and 1 for the Home-care group. Each construct is regressed on V7. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nm3 <- \"\n   # Measurement Model\n   Academic =~ 1*V1 + V2 + V3\n   Social   =~ NA*V4 + V5 + 1*V6\n   \n   Academic ~ V7\n   Social   ~ V7\n\"\n```\n:::\n\n\nFit the model and get the summary. Compare with Fig 5.3 (p. 180)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm3_fit <- sem(m3, sample.cov = cov, sample.nobs = n)\nsummary(m3_fit, fit.measures = TRUE)\n```\n:::\n\n\nGet the fit measures. Compare with page 181 (middle of the page).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGetFit(m3_fit)\n```\n:::\n\n\nGet the effect sizes. But first get the model estimates in a list. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nestimates <- lavInspect(m3_fit, \"est\"); estimates\n```\n:::\n\n\nNote that the means are in element \"beta\", and the co/variances are in element \"psi\". Extract the means and the variances (using `diag()` to select just the variances). The formula for effect size is much the same as before, but is given again at the top of page 182. Compare the effect sizes with those given at the top of page 182.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  Get means and variances\nmeans <- estimates$beta[1:2, \"V7\"]\nvars <- diag(estimates$psi[1:2, 1:2])\n\n# Effect sizes\nES <- t(t(round(means/sqrt(vars), 3)))\ncolnames(ES) <- \"ES\"\nES\n```\n:::\n\n\n<br />\n\n## SSM assuming partial invariance\n\nGet the data from Table 5.2 (p.183). Same procedure as before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group 1 - Day-care\ncov1 <- c(\n 154.54,\n  44.75,  90.23,\n  40.98,  22.77,  78.76,\t\n  41.35,   2.83,   7.92, 220.12,\n  23.28,   9.12,   0.75,  61.46, 159.88,\n  47.08,  22.88,  16.05, 125.08,  84.31, 332.26\n) \n\nmeans1 <- c(49.14, 82.60, 104.95, 78.58, 54.95, 119.91)\nn1 <- 250\n\n# Group 2 - Home-care\ncov2 <- c(\n 124.93,\n  52.19,  80.67,\n  64.45,  42.85,  83.56,\n  59.95,  33.10,  38.34, 290.65,\n  32.32,  16.09,  18.29, 124.71, 169.17,\n  87.15,  39.70,  51.82, 174.20, 108.39, 355.22\n)\n\nmeans2 <- c(55.01, 81.22, 97.01, 72.67, 46.57, 124.28)\nn2 <- 150\n\n# Get the variable names\nnames <- c(\"V1\", \"V2\", \"V3\", \"V4\", \"V5\", \"V6\")\n\n# Get the full variance/covariances matrices\ncov1 <- getCov(cov1, names = names)\ncov2 <- getCov(cov2, names = names)\n\n# Combine into lists\ncov <- list(\"Day-care\" = cov1, \"Home-care\" = cov2)\nmeans <- list(means1, means2)\nn <- list(n1, n2)\n```\n:::\n\n\n\n\n\n\n\n### MIMIC model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov <- c(\n 151.18,\n  45.52,  86.88,\n  38.69,  32.78,  95.18,\n  40.06,  16.03,  30.27, 254.09,\n  15.04,  14.41,  22.94,  96.55, 179.46,\n  67.94,  27.69,  21.22, 137.05,  84.49, 344.48,\n   1.83,  -0.32,  -1.87,  -1.39,  -1.97,   1.03,  0.235\n)\n\nn <- 400\n\n# Get the variable names\nnames <- c(\"V1\", \"V2\", \"V3\", \"V4\", \"V5\", \"V6\", \"V7\")\n\n# Get the full variance/covariance matrix\ncov <- getCov(cov, names = names)\n```\n:::\n\n\n<br />\n\n\n\nThe R script with minimal commenting is available in [Thompson\\_Means\\.r](Thompson\\_Means\\.r).\n",
    "supporting": [
      "Thompson_2013_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}